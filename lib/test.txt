//TEST test kladsjf

minimum(A){
    min = A[0]
    for i = 1 to A.length {
        if min > A[i] {
            min = A[i]
        }
    }
    return min
}

print(minimum([0, 1, 2]))

x = 1

while x < 10 do {
    x = x + 1
    if x < 5 {
        continue
    }
} 

repeat {
    x = x + 1
} until x == 15

print(x)
y = -3.4
print(floor(-y))


listInsert(L, x){
    x.next = L.head
    if L.head != 0 {
        L.head.prev = x
    }
    L.head = x
    x.prev = 0
    return x
}

let A be a new stack
let B be a new queue
let C be a new array
let D be a new hashtable

list = newLinkedList([1, 2, 3, 4, 5])
A = [ 1, 2, 5, 3, 7, 8, 3, 1000 ]
sort A

print(listInsert(list, newLinkedList([6])).head.key)

print([1].head)

treeSearch(x, k){
    if x == NIL or k == x.key {
        return x
    }
    if k < x.key {
        return treeSearch(x.left, k)
    } else {
        return treeSearch(x.right, k)
    }
}

tree = newBinaryTree([3, 1, 5])
print(treeSearch(tree.root, 2))


Test(){
    return (1,2,3)
}

(e, f, g) = Test()
print(f)

exchange e with f
print(e)
print(f)

str = "Hello World"
print(str)

random(5)