//TEST test kladsjf \n
minimum(A){\n
    min = A[0]\n
    for i = 1 to A.length {\n
        if min > A[i] {\n
            min = A[i]\n
        }\n
    }\n
    return min\n
}\n

print(minimum([0, 1, 2]))\n

x = 1\n

while x < 10 do {\n
    x = x + 1\n
    if x < 5 {\n
        continue\n
    }\n
}\n

repeat {\n
    x = x + 1\n
} until x == 15\n

print(x)\n
y = -3.4\n
print(floor(-y))\n

listInsert(L, x){\n
    x.next = L.head\n
    if L.head != 0 {\n
        L.head.prev = x\n
    }\n
    L.head = x\n
    x.prev = 0\n
    return x\n
}\n

let A be a new stack\n
let B be a new queue\n
let C be a new array\n
let D be a new hashtable\n

list = newLinkedList([1, 2, 3, 4, 5])\n
A = [ 1, 2, 5, 3, 7, 8, 3, 1000 ]\n
sort A\n

print(listInsert(list, newLinkedList([6])).head.key)\n

print([1].head)\n

treeSearch(x, k){\n
    if x == NIL or k == x.key {\n
        return x\n
    }\n
    if k < x.key {\n
        return treeSearch(x.left, k)\n
    } else {\n
        return treeSearch(x.right, k)\n
    }\n
}\n

tree = newBinaryTree([3, 1, 5])\n
print(treeSearch(tree.root, 2))\n

Test(){\n
    return (1,2,3)\n
}\n

(e, f, g) = Test()\n
print(f)\n

exchange e with f\n
print(e)\n
print(f)\n

str = "Hello World"\n
print(str)\n

random(5, 10)\n

ten = 10\n
if ten == 5 {\n
    print("Five")\n
} elseif ten == 10 {\n
    print("Ten")\n
} else {\n
    print("Not ten")\n
}\n
infPos = infinity\n
infNeg = -infinity\n
print(infPos)\n
print(infNeg)\n
error "This is an error message"\n
